package main

import (
	"fmt"
	"log"
	"os"

	"github.com/onyx/onyx-tui/graph_service/internal/analyzer"
	"github.com/onyx/onyx-tui/graph_service/internal/db"
)

func main() {
	fmt.Println("=== Phase 2: Enhanced Go Language Support Test ===")

	// Initialize database
	database, err := db.NewKuzuDatabase("enhanced_go_test.db")
	if err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}
	defer database.Close()

	// Create schema
	err = database.CreateSchema()
	if err != nil {
		log.Fatalf("Failed to create schema: %v", err)
	}

	// Read the advanced Go example file
	content, err := os.ReadFile("examples/advanced_go_project/main.go")
	if err != nil {
		log.Fatalf("Failed to read advanced Go example: %v", err)
	}

	// Test the enhanced Go analyzer
	fmt.Println("\n=== Testing Enhanced Go Analyzer ===")
	enhancedAnalyzer := analyzer.NewEnhancedGoAnalyzer()
	file, relationships, err := enhancedAnalyzer.AnalyzeFile("examples/advanced_go_project/main.go", content)
	if err != nil {
		log.Fatalf("Failed to analyze Go file with enhanced analyzer: %v", err)
	}

	fmt.Printf("Successfully analyzed advanced Go file: %s\n", file.Path)
	fmt.Printf("Language: %s\n", file.Language)
	fmt.Printf("Total entities found: %d\n", len(file.GetAllEntities()))
	fmt.Printf("Total relationships found: %d\n", len(relationships))

	// Analyze entities by type
	fmt.Println("\n=== Enhanced Entity Analysis ===")
	allEntities := file.GetAllEntities()

	entityCounts := make(map[string]int)
	entityExamples := make(map[string][]string)

	for _, entity := range allEntities {
		entityType := string(entity.Type)
		entityCounts[entityType]++

		// Collect examples (limit to 3 per type)
		if len(entityExamples[entityType]) < 3 {
			entityExamples[entityType] = append(entityExamples[entityType], entity.Name)
		}
	}

	for entityType, count := range entityCounts {
		fmt.Printf("- %s: %d found", entityType, count)
		if examples, exists := entityExamples[entityType]; exists {
			fmt.Printf(" (examples: %v)", examples)
		}
		fmt.Println()
	}

	// Analyze relationships by type
	fmt.Println("\n=== Enhanced Relationship Analysis ===")
	relationshipCounts := make(map[string]int)
	relationshipExamples := make(map[string][]string)

	for _, rel := range relationships {
		relType := string(rel.Type)
		relationshipCounts[relType]++

		// Collect examples (limit to 3 per type)
		if len(relationshipExamples[relType]) < 3 {
			relationshipExamples[relType] = append(relationshipExamples[relType], rel.String())
		}
	}

	for relType, count := range relationshipCounts {
		fmt.Printf("- %s: %d found", relType, count)
		if examples, exists := relationshipExamples[relType]; exists && len(examples) > 0 {
			fmt.Printf(" (example: %s)", examples[0])
		}
		fmt.Println()
	}

	// Store entities in database for querying
	fmt.Println("\n=== Storing in Database ===")
	for _, entity := range allEntities {
		err := database.StoreEntity(entity)
		if err != nil {
			fmt.Printf("Warning: Failed to store entity %s: %v\n", entity.Name, err)
		}
	}

	for _, rel := range relationships {
		err := database.StoreRelationship(rel)
		if err != nil {
			fmt.Printf("Warning: Failed to store relationship: %v\n", err)
		}
	}

	// Enhanced database queries
	fmt.Println("\n=== Enhanced Database Queries ===")

	// Query for interfaces
	result, err := database.ExecuteQuery("MATCH (i:Interface) RETURN i.name ORDER BY i.name")
	if err != nil {
		fmt.Printf("Note: Interface query not available (table may not exist): %v\n", err)
	} else {
		fmt.Printf("Interfaces found:\n%s\n", result)
	}

	// Query for structs
	result, err = database.ExecuteQuery("MATCH (s:Struct) RETURN s.name ORDER BY s.name")
	if err != nil {
		fmt.Printf("Note: Struct query not available (table may not exist): %v\n", err)
	} else {
		fmt.Printf("Structs found:\n%s\n", result)
	}

	// Query for methods with receiver info
	result, err = database.ExecuteQuery("MATCH (m:Method) RETURN m.name, m.signature LIMIT 5")
	if err != nil {
		fmt.Printf("Methods query not available: %v\n", err)
	} else {
		fmt.Printf("Sample methods with signatures:\n%s\n", result)
	}

	// Demo: Show advanced features detected
	fmt.Println("\n=== Advanced Features Detected ===")

	// Count interfaces
	interfaceCount := 0
	structCount := 0
	methodCount := 0

	for _, entity := range allEntities {
		switch entity.Type {
		case "Interface":
			interfaceCount++
		case "Struct":
			structCount++
		case "Method":
			methodCount++
		}
	}

	fmt.Printf("âœ… Interface definitions: %d\n", interfaceCount)
	fmt.Printf("âœ… Struct definitions: %d\n", structCount)
	fmt.Printf("âœ… Method implementations: %d\n", methodCount)

	// Count advanced relationships
	embedsCount := 0
	implementsCount := 0
	callsCount := 0

	for _, rel := range relationships {
		switch rel.Type {
		case "EMBEDS":
			embedsCount++
		case "IMPLEMENTS":
			implementsCount++
		case "CALLS":
			callsCount++
		}
	}

	fmt.Printf("âœ… Struct embedding relationships: %d\n", embedsCount)
	fmt.Printf("âœ… Interface implementation relationships: %d\n", implementsCount)
	fmt.Printf("âœ… Function/method call relationships: %d\n", callsCount)

	// Success summary
	fmt.Println("\n=== Phase 2 Enhanced Go Support - FEATURES IMPLEMENTED ===")
	fmt.Println("âœ… Advanced entity extraction (interfaces, structs with fields)")
	fmt.Println("âœ… Interface method signature extraction")
	fmt.Println("âœ… Struct field and embedding detection")
	fmt.Println("âœ… Method receiver type analysis")
	fmt.Println("âœ… Interface implementation detection")
	fmt.Println("âœ… Enhanced relationship mapping")
	fmt.Println("âœ… Type registry and cross-reference analysis")
	fmt.Println("âœ… Go-specific language construct support")

	fmt.Println("\nðŸŽ‰ Phase 2 Enhanced Go Language Support - COMPLETE!")
}
